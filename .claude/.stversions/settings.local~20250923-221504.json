{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(pip3 list:*)",
      "Bash(pip install:*)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "Bash(chmod:*)",
      "WebFetch(domain:github.com)",
      "Bash(curl:*)",
      "Bash(hdiutil attach:*)",
      "Read(//Volumes/UI TARS/**)",
      "Bash(hdiutil detach:*)",
      "Bash(open:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git tag:*)",
      "Bash(git checkout:*)",
      "Bash(find:*)",
      "Bash(docker-compose config:*)",
      "Bash(npx create-next-app:*)",
      "Bash(npm install:*)",
      "Bash(npx playwright:*)",
      "Bash(npm run build:*)",
      "Bash(timeout 10s npm run dev)",
      "Bash(pkill:*)",
      "Bash(lsof:*)",
      "Bash(xargs kill:*)",
      "Bash(make:*)",
      "Bash(docker logs:*)",
      "Bash(docker exec:*)",
      "Bash(docker restart:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(psql:*)",
      "Bash(cat:*)",
      "Bash(redis-cli:*)",
      "Bash(./scripts/verify_crawl_stack.sh:*)",
      "Bash(bash:*)",
      "Bash(osascript:*)",
      "Bash(python3:*)",
      "Bash(tailscale:*)",
      "Bash(PGPASSWORD=freedomtech psql -h localhost -p 5432 -U postgres -d freedom_kb -c \"\\dt\")",
      "Bash(brew install:*)",
      "Read(//opt/homebrew/Cellar/pgvector/0.8.1/**)",
      "Read(//opt/homebrew/Cellar/pgvector/**)",
      "Bash(pg_config:*)",
      "Bash(sudo cp:*)",
      "Read(//private/tmp/**)",
      "Bash(PG_CONFIG=/opt/homebrew/opt/postgresql@15/bin/pg_config make)",
      "Bash(PG_CONFIG=/opt/homebrew/opt/postgresql@15/bin/pg_config make install)",
      "Bash(OPENAI_API_KEY=$OPENAI_API_KEY python3 add_embeddings.py)",
      "Bash(echo:*)",
      "Bash(diskutil:*)",
      "Bash(system_profiler:*)",
      "Bash(dd:*)",
      "Bash(ssh-keygen:*)",
      "Bash(ssh:*)",
      "Bash(git push:*)",
      "Bash(git lfs:*)",
      "Bash(git stash push:*)",
      "Bash(git stash:*)",
      "Bash(git fetch:*)",
      "Bash(npx:*)",
      "Bash(claude --version)",
      "Bash(npm search:*)",
      "Bash(npm info:*)",
      "Bash(claude mcp:*)",
      "Read(//Users/arthurdell/**)",
      "Bash(PGPASSWORD=freedom_dev psql -U freedom -d techknowledge -h localhost -c \"\\dt\")",
      "Bash(node:*)",
      "Bash(claude code mcp --help)",
      "Bash(git reset:*)",
      "Read(///**)",
      "Bash(launchctl load:*)",
      "Bash(launchctl:*)",
      "Bash(xargs:*)",
      "Read(//Volumes/DATA/**)",
      "WebFetch(domain:lmstudio.ai)",
      "WebSearch",
      "Bash(pip3 show:*)",
      "Bash(huggingface-cli download:*)",
      "Bash(nettop:*)",
      "Bash(awk:*)",
      "Bash(mlx_lm convert:*)",
      "Bash(nc:*)",
      "Bash(/dev/null)",
      "Bash(__NEW_LINE__ echo \"2. Testing techknowledge database - chunk count:\")",
      "Bash(PGPASSWORD=freedom_dev psql -h localhost -U freedom -d techknowledge -t -c \"SELECT COUNT(*) FROM document_chunks;\")",
      "Bash(__NEW_LINE__ echo \"3. Testing pgvector extension:\")",
      "Bash(PGPASSWORD=freedom_dev psql -h localhost -U freedom -d techknowledge -t -c \"SELECT extname, extversion FROM pg_extension WHERE extname = ''vector'';\")",
      "Bash(for db in freedom_kb techknowledge postgres)",
      "Bash(do echo -e \"\\n═══ Database: $db ═══\")",
      "Bash(done)",
      "Bash(git rev-parse:*)",
      "Bash(rm:*)",
      "Bash(gh auth:*)",
      "Bash(git config:*)",
      "Bash(env)",
      "Bash(mkdir:*)",
      "Bash(./freedom-recover:*)",
      "Bash(gh run list:*)",
      "Bash(./freedom-save)",
      "Bash(sysctl:*)",
      "Bash(vm_stat:*)",
      "Bash(~/.claude/claude-knowledge-system/setup.sh)",
      "Bash(~/.claude/ccks test)",
      "Bash(~/.claude/ccks stats)",
      "Bash(~/.claude/ccks add \"HIGH VELOCITY TEST: 2-minute flush interval active\")",
      "Bash(~/.claude/ccks query \"FREEDOM docker\")",
      "Bash(paste:*)",
      "Bash(~/.claude/ccks:*)",
      "Bash(grep:*)",
      "Bash(pgrep:*)",
      "Bash(ray start:*)",
      "Bash(./SAF_StudioAirFabric/saf_status_current.sh:*)",
      "Bash(ping:*)",
      "Bash(ray stop:*)",
      "Bash(./SAF_StudioAirFabric/saf_start_alpha.sh:*)",
      "Bash(./SAF_StudioAirFabric/saf_start_alpha_simple.sh:*)",
      "Bash(./SAF_StudioAirFabric/saf_beta_remote_start.sh:*)",
      "Bash(RAY_ENABLE_WINDOWS_OR_OSX_CLUSTER=1 ray start --head --node-ip-address=\"100.106.170.128\" --port=\"6380\" --num-cpus=\"32\" --disable-usage-stats)",
      "Bash(python3.9:*)",
      "Bash(/usr/bin/python3:*)",
      "Bash(/Volumes/DATA/FREEDOM/scripts/optimize_network.sh:*)",
      "Bash(sudo:*)",
      "Bash(RAY_ENABLE_WINDOWS_OR_OSX_CLUSTER=1 python3.9 -m ray.scripts.scripts start --head --node-ip-address=\"100.106.170.128\" --port=\"6380\" --num-cpus=\"32\" --disable-usage-stats)",
      "Bash(timeout:*)",
      "Bash(export RAY_ENABLE_WINDOWS_OR_OSX_CLUSTER=1)",
      "Bash(ioreg:*)",
      "Read(//Volumes/CCKS_RAM/**)",
      "Bash(for:*)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(while read f)",
      "Bash(head:*)",
      "Bash(~/.claude/ccks_ensure_turbo.sh:*)",
      "Bash(./SAF_StudioAirFabric/saf_install_service.sh:*)",
      "Bash(~/.claude/verify_ccks_optimal.sh:*)",
      "Bash(nmap:*)",
      "Bash(./ccks add \"CCKS GPU optimization complete: MLX acceleration with 768-dim embeddings, batch processing, and memory-mapped file streaming\")",
      "Bash(./ccks query \"GPU optimization\")",
      "Bash(tar:*)",
      "Bash(/opt/homebrew/opt/syncthing/bin/syncthing cli show id)",
      "Bash(/opt/homebrew/opt/syncthing/bin/syncthing -device-id)",
      "Bash(openssl:*)",
      "Bash(/opt/homebrew/opt/syncthing/bin/syncthing cli config devices list)",
      "Bash(/opt/homebrew/opt/syncthing/bin/syncthing --device-id)",
      "Bash(/Volumes/DATA/FREEDOM/test_ccks_sync.sh:*)",
      "Bash(scp:*)"
    ],
    "deny": [],
    "ask": []
  },
  "outputStyle": "Explanatory"
}