version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_USER: freedom
      POSTGRES_PASSWORD: freedom_dev
      POSTGRES_DB: freedom_kb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U freedom -d freedom_kb"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      FREEDOM_API_KEY: ${FREEDOM_API_KEY:-dev-key-change-in-production}
      KB_SERVICE_URL: http://kb-service:8000
      MLX_SERVICE_URL: http://mlx-server:8000
      CORS_ORIGINS: http://localhost:3000,http://castle-gui:3000
      RATE_LIMIT: 100/minute
      LOG_LEVEL: INFO
    depends_on:
      kb-service:
        condition: service_healthy
      mlx-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  kb-service:
    build:
      context: ./services/kb
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: freedom_kb
      POSTGRES_USER: freedom
      POSTGRES_PASSWORD: freedom_dev
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  mlx-server:
    build:
      context: ./services/mlx
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      MLX_HOST: host.docker.internal
      MLX_PORT: 8000
      HOST: 0.0.0.0
      PORT: 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  castle-gui:
    build:
      context: ./apps/castle
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_API_KEY: ${FREEDOM_API_KEY:-dev-key-change-in-production}
      NEXT_PUBLIC_WS_URL: ws://localhost:8080
      NODE_ENV: production
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  techknowledge:
    build:
      context: ./services/techknowledge
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: techknowledge
      POSTGRES_USER: freedom
      POSTGRES_PASSWORD: freedom_dev
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Router Service
  router:
    build:
      context: ./services/router
      dockerfile: Dockerfile
    container_name: freedom-router
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8003:8003"
    networks:
      - freedom_default
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: freedom-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - freedom_default
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  # Playwright Worker
  playwright-worker:
    build:
      context: ./services/playwright_worker
      dockerfile: Dockerfile
    container_name: freedom-playwright-worker
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - freedom_default
    restart: unless-stopped

  # Firecrawl Service
  firecrawl:
    build:
      context: ./services/firecrawl
      dockerfile: Dockerfile
    container_name: freedom-firecrawl
    environment:
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
    ports:
      - "8004:8004"
    networks:
      - freedom_default
    restart: unless-stopped

volumes:
  postgres_data:
  redis-data:

networks:
  freedom_default:
    driver: bridge